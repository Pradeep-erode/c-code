
///main class

using System;

namespace ConsoleApp1
{
    using System;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
           
            Console.WriteLine("Hello World!");
            Child obj = new Child();            //object created for child class
            obj.display();                      //access display function with the help of object created
            obj.disk();
            obj.show(3, 7);                     //giving inputs for show function through arguments
            obj.disp();
            obj.run();
            obj.displ();

        }
    }

	
	//derived class
	
	
	                             //inheritance of father class
    class Child : Father,Man,borth   // mutipel iheritance archived in c# with the help of interface                              
    {                                          
        public override void display()  //implementation of abstract class using override keyword whereas in method overriding on polymorphism  this is not compulsary 
        {
            Console.WriteLine("I am implanted class");
        }
        public void disk()
        {
            Console.Write("I am pradeep");
            Child obj = new Child();
            obj.show(6, 7);
        }
        public void disp()
        {
            Console.WriteLine("\n");
            Console.WriteLine("I am interface class");
        }
        public void run()
        {
            Console.WriteLine("I am interface class");
        }
	public void displ()             
        {
            Console.WriteLine("I am implanted interface inheritance ");
        }

    }
	///Base class
  
    public abstract class Father           //abstract can have both  marked abstract method and non-abstract method in abstract class
    {
                                          
        public abstract void display();    //abstract method(or marked abstract method) and implemention not done

        public void show(int a,int b)      //getting inputs through arguments   //non-abstract method in abstract class 
        {
           
            Console.Write("\nsum =" + (a + b));
        }

    }
    
    ////interface class
    
    
     interface Man      //But interface class having abstract method only 
    {
        void disp();   /// <summary>
                        /// here public and abtract words are by default in interface
                       /// </summary>
        void run();
    }
    interface borth
    {
        
      public  void displ();

      

    }
}
